#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Application_Anbar
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Anbar")]
	public partial class AnbarDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertSeller(Seller instance);
    partial void UpdateSeller(Seller instance);
    partial void DeleteSeller(Seller instance);
    partial void InsertEnterDetail(EnterDetail instance);
    partial void UpdateEnterDetail(EnterDetail instance);
    partial void DeleteEnterDetail(EnterDetail instance);
    partial void InsertEnterDoc(EnterDoc instance);
    partial void UpdateEnterDoc(EnterDoc instance);
    partial void DeleteEnterDoc(EnterDoc instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertOrderDetail(OrderDetail instance);
    partial void UpdateOrderDetail(OrderDetail instance);
    partial void DeleteOrderDetail(OrderDetail instance);
    partial void InsertCustomerAccount(CustomerAccount instance);
    partial void UpdateCustomerAccount(CustomerAccount instance);
    partial void DeleteCustomerAccount(CustomerAccount instance);
    partial void InsertSellerAccount(SellerAccount instance);
    partial void UpdateSellerAccount(SellerAccount instance);
    partial void DeleteSellerAccount(SellerAccount instance);
    partial void InsertCheque(Cheque instance);
    partial void UpdateCheque(Cheque instance);
    partial void DeleteCheque(Cheque instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertRequest(Request instance);
    partial void UpdateRequest(Request instance);
    partial void DeleteRequest(Request instance);
    #endregion
		
		public AnbarDataContext() : 
				base(global::Application_Anbar.Properties.Settings.Default.AnbarConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public AnbarDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AnbarDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AnbarDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AnbarDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<ViewRequestProduct> ViewRequestProducts
		{
			get
			{
				return this.GetTable<ViewRequestProduct>();
			}
		}
		
		public System.Data.Linq.Table<Seller> Sellers
		{
			get
			{
				return this.GetTable<Seller>();
			}
		}
		
		public System.Data.Linq.Table<EnterDetail> EnterDetails
		{
			get
			{
				return this.GetTable<EnterDetail>();
			}
		}
		
		public System.Data.Linq.Table<EnterDoc> EnterDocs
		{
			get
			{
				return this.GetTable<EnterDoc>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<OrderDetail> OrderDetails
		{
			get
			{
				return this.GetTable<OrderDetail>();
			}
		}
		
		public System.Data.Linq.Table<CustomerAccount> CustomerAccounts
		{
			get
			{
				return this.GetTable<CustomerAccount>();
			}
		}
		
		public System.Data.Linq.Table<SellerAccount> SellerAccounts
		{
			get
			{
				return this.GetTable<SellerAccount>();
			}
		}
		
		public System.Data.Linq.Table<Cheque> Cheques
		{
			get
			{
				return this.GetTable<Cheque>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Request> Requests
		{
			get
			{
				return this.GetTable<Request>();
			}
		}
	}
	
	[Table(Name="dbo.Categories")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryID;
		
		private string _CategoryName;
		
		private string _Description;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Category()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[Column(Storage="_CategoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryName", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Category_Product", Storage="_Products", OtherKey="CategoryID")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[Table(Name="dbo.Customers")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerID;
		
		private string _CustomerName;
		
		private string _CompanyName;
		
		private string _City;
		
		private string _PostalCode;
		
		private string _Phonecompany;
		
		private string _phone;
		
		private string _Fax;
		
		private string _Address;
		
		private EntitySet<Order> _Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnCustomerNameChanging(string value);
    partial void OnCustomerNameChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    partial void OnPhonecompanyChanging(string value);
    partial void OnPhonecompanyChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
		
		public Customer()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			OnCreated();
		}
		
		[Column(Storage="_CustomerID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerName", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string CustomerName
		{
			get
			{
				return this._CustomerName;
			}
			set
			{
				if ((this._CustomerName != value))
				{
					this.OnCustomerNameChanging(value);
					this.SendPropertyChanging();
					this._CustomerName = value;
					this.SendPropertyChanged("CustomerName");
					this.OnCustomerNameChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyName", DbType="NVarChar(25)")]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[Column(Storage="_City", DbType="NVarChar(25)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_PostalCode", DbType="NVarChar(25)")]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					this.OnPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalCode = value;
					this.SendPropertyChanged("PostalCode");
					this.OnPostalCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Phonecompany", DbType="NVarChar(30)")]
		public string Phonecompany
		{
			get
			{
				return this._Phonecompany;
			}
			set
			{
				if ((this._Phonecompany != value))
				{
					this.OnPhonecompanyChanging(value);
					this.SendPropertyChanging();
					this._Phonecompany = value;
					this.SendPropertyChanged("Phonecompany");
					this.OnPhonecompanyChanged();
				}
			}
		}
		
		[Column(Storage="_phone", DbType="NVarChar(30)")]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[Column(Storage="_Fax", DbType="NVarChar(20)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NVarChar(100)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Association(Name="Customer_Order", Storage="_Orders", OtherKey="CustomerID")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[Table(Name="dbo.ViewRequestProduct")]
	public partial class ViewRequestProduct
	{
		
		private int _ProductID;
		
		private string _ProductName;
		
		private string _RequestDate;
		
		private string _NeedDate;
		
		private System.Nullable<int> _teadad;
		
		public ViewRequestProduct()
		{
		}
		
		[Column(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this._ProductID = value;
				}
			}
		}
		
		[Column(Storage="_ProductName", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this._ProductName = value;
				}
			}
		}
		
		[Column(Storage="_RequestDate", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string RequestDate
		{
			get
			{
				return this._RequestDate;
			}
			set
			{
				if ((this._RequestDate != value))
				{
					this._RequestDate = value;
				}
			}
		}
		
		[Column(Storage="_NeedDate", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string NeedDate
		{
			get
			{
				return this._NeedDate;
			}
			set
			{
				if ((this._NeedDate != value))
				{
					this._NeedDate = value;
				}
			}
		}
		
		[Column(Storage="_teadad", DbType="Int")]
		public System.Nullable<int> teadad
		{
			get
			{
				return this._teadad;
			}
			set
			{
				if ((this._teadad != value))
				{
					this._teadad = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.Sellers")]
	public partial class Seller : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SellerID;
		
		private string _SellerName;
		
		private string _CompanyName;
		
		private string _City;
		
		private string _PostalCode;
		
		private string _Phonecompany;
		
		private string _phone;
		
		private string _Fax;
		
		private string _Address;
		
		private EntitySet<EnterDoc> _EnterDocs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSellerIDChanging(int value);
    partial void OnSellerIDChanged();
    partial void OnSellerNameChanging(string value);
    partial void OnSellerNameChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    partial void OnPhonecompanyChanging(string value);
    partial void OnPhonecompanyChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
		
		public Seller()
		{
			this._EnterDocs = new EntitySet<EnterDoc>(new Action<EnterDoc>(this.attach_EnterDocs), new Action<EnterDoc>(this.detach_EnterDocs));
			OnCreated();
		}
		
		[Column(Storage="_SellerID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SellerID
		{
			get
			{
				return this._SellerID;
			}
			set
			{
				if ((this._SellerID != value))
				{
					this.OnSellerIDChanging(value);
					this.SendPropertyChanging();
					this._SellerID = value;
					this.SendPropertyChanged("SellerID");
					this.OnSellerIDChanged();
				}
			}
		}
		
		[Column(Storage="_SellerName", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string SellerName
		{
			get
			{
				return this._SellerName;
			}
			set
			{
				if ((this._SellerName != value))
				{
					this.OnSellerNameChanging(value);
					this.SendPropertyChanging();
					this._SellerName = value;
					this.SendPropertyChanged("SellerName");
					this.OnSellerNameChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyName", DbType="NVarChar(25)")]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[Column(Storage="_City", DbType="NVarChar(25)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_PostalCode", DbType="NVarChar(25)")]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					this.OnPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalCode = value;
					this.SendPropertyChanged("PostalCode");
					this.OnPostalCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Phonecompany", DbType="NVarChar(30)")]
		public string Phonecompany
		{
			get
			{
				return this._Phonecompany;
			}
			set
			{
				if ((this._Phonecompany != value))
				{
					this.OnPhonecompanyChanging(value);
					this.SendPropertyChanging();
					this._Phonecompany = value;
					this.SendPropertyChanged("Phonecompany");
					this.OnPhonecompanyChanged();
				}
			}
		}
		
		[Column(Storage="_phone", DbType="NVarChar(30)")]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[Column(Storage="_Fax", DbType="NVarChar(20)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NVarChar(100)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Association(Name="Seller_EnterDoc", Storage="_EnterDocs", OtherKey="SellerID")]
		public EntitySet<EnterDoc> EnterDocs
		{
			get
			{
				return this._EnterDocs;
			}
			set
			{
				this._EnterDocs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EnterDocs(EnterDoc entity)
		{
			this.SendPropertyChanging();
			entity.Seller = this;
		}
		
		private void detach_EnterDocs(EnterDoc entity)
		{
			this.SendPropertyChanging();
			entity.Seller = null;
		}
	}
	
	[Table(Name="dbo.EnterDetails")]
	public partial class EnterDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _EnterID;
		
		private int _ProductID;
		
		private long _BuyPrice;
		
		private int _Teadad;
		
		private System.Nullable<double> _Discount;
		
		private EntityRef<EnterDoc> _EnterDoc;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEnterIDChanging(long value);
    partial void OnEnterIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnBuyPriceChanging(long value);
    partial void OnBuyPriceChanged();
    partial void OnTeadadChanging(int value);
    partial void OnTeadadChanged();
    partial void OnDiscountChanging(System.Nullable<double> value);
    partial void OnDiscountChanged();
    #endregion
		
		public EnterDetail()
		{
			this._EnterDoc = default(EntityRef<EnterDoc>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[Column(Storage="_EnterID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long EnterID
		{
			get
			{
				return this._EnterID;
			}
			set
			{
				if ((this._EnterID != value))
				{
					if (this._EnterDoc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEnterIDChanging(value);
					this.SendPropertyChanging();
					this._EnterID = value;
					this.SendPropertyChanged("EnterID");
					this.OnEnterIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProductID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[Column(Storage="_BuyPrice", DbType="BigInt NOT NULL")]
		public long BuyPrice
		{
			get
			{
				return this._BuyPrice;
			}
			set
			{
				if ((this._BuyPrice != value))
				{
					this.OnBuyPriceChanging(value);
					this.SendPropertyChanging();
					this._BuyPrice = value;
					this.SendPropertyChanged("BuyPrice");
					this.OnBuyPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Teadad", DbType="Int NOT NULL")]
		public int Teadad
		{
			get
			{
				return this._Teadad;
			}
			set
			{
				if ((this._Teadad != value))
				{
					this.OnTeadadChanging(value);
					this.SendPropertyChanging();
					this._Teadad = value;
					this.SendPropertyChanged("Teadad");
					this.OnTeadadChanged();
				}
			}
		}
		
		[Column(Storage="_Discount", DbType="Float")]
		public System.Nullable<double> Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this.OnDiscountChanging(value);
					this.SendPropertyChanging();
					this._Discount = value;
					this.SendPropertyChanged("Discount");
					this.OnDiscountChanged();
				}
			}
		}
		
		[Association(Name="EnterDoc_EnterDetail", Storage="_EnterDoc", ThisKey="EnterID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EnterDoc EnterDoc
		{
			get
			{
				return this._EnterDoc.Entity;
			}
			set
			{
				EnterDoc previousValue = this._EnterDoc.Entity;
				if (((previousValue != value) 
							|| (this._EnterDoc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EnterDoc.Entity = null;
						previousValue.EnterDetails.Remove(this);
					}
					this._EnterDoc.Entity = value;
					if ((value != null))
					{
						value.EnterDetails.Add(this);
						this._EnterID = value.EnterID;
					}
					else
					{
						this._EnterID = default(long);
					}
					this.SendPropertyChanged("EnterDoc");
				}
			}
		}
		
		[Association(Name="Product_EnterDetail", Storage="_Product", ThisKey="ProductID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.EnterDetails.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.EnterDetails.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.EnterDocuments")]
	public partial class EnterDoc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _EnterID;
		
		private int _SellerID;
		
		private string _Date;
		
		private System.Nullable<bool> _Validate;
		
		private EntitySet<EnterDetail> _EnterDetails;
		
		private EntitySet<SellerAccount> _SellerAccounts;
		
		private EntityRef<Seller> _Seller;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEnterIDChanging(long value);
    partial void OnEnterIDChanged();
    partial void OnSellerIDChanging(int value);
    partial void OnSellerIDChanged();
    partial void OnDateChanging(string value);
    partial void OnDateChanged();
    partial void OnValidateChanging(System.Nullable<bool> value);
    partial void OnValidateChanged();
    #endregion
		
		public EnterDoc()
		{
			this._EnterDetails = new EntitySet<EnterDetail>(new Action<EnterDetail>(this.attach_EnterDetails), new Action<EnterDetail>(this.detach_EnterDetails));
			this._SellerAccounts = new EntitySet<SellerAccount>(new Action<SellerAccount>(this.attach_SellerAccounts), new Action<SellerAccount>(this.detach_SellerAccounts));
			this._Seller = default(EntityRef<Seller>);
			OnCreated();
		}
		
		[Column(Storage="_EnterID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long EnterID
		{
			get
			{
				return this._EnterID;
			}
			set
			{
				if ((this._EnterID != value))
				{
					this.OnEnterIDChanging(value);
					this.SendPropertyChanging();
					this._EnterID = value;
					this.SendPropertyChanged("EnterID");
					this.OnEnterIDChanged();
				}
			}
		}
		
		[Column(Storage="_SellerID", DbType="Int NOT NULL")]
		public int SellerID
		{
			get
			{
				return this._SellerID;
			}
			set
			{
				if ((this._SellerID != value))
				{
					if (this._Seller.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSellerIDChanging(value);
					this.SendPropertyChanging();
					this._SellerID = value;
					this.SendPropertyChanged("SellerID");
					this.OnSellerIDChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_Validate", DbType="Bit")]
		public System.Nullable<bool> Validate
		{
			get
			{
				return this._Validate;
			}
			set
			{
				if ((this._Validate != value))
				{
					this.OnValidateChanging(value);
					this.SendPropertyChanging();
					this._Validate = value;
					this.SendPropertyChanged("Validate");
					this.OnValidateChanged();
				}
			}
		}
		
		[Association(Name="EnterDoc_EnterDetail", Storage="_EnterDetails", OtherKey="EnterID")]
		public EntitySet<EnterDetail> EnterDetails
		{
			get
			{
				return this._EnterDetails;
			}
			set
			{
				this._EnterDetails.Assign(value);
			}
		}
		
		[Association(Name="EnterDoc_SellerAccount", Storage="_SellerAccounts", OtherKey="EnterID")]
		public EntitySet<SellerAccount> SellerAccounts
		{
			get
			{
				return this._SellerAccounts;
			}
			set
			{
				this._SellerAccounts.Assign(value);
			}
		}
		
		[Association(Name="Seller_EnterDoc", Storage="_Seller", ThisKey="SellerID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Seller Seller
		{
			get
			{
				return this._Seller.Entity;
			}
			set
			{
				Seller previousValue = this._Seller.Entity;
				if (((previousValue != value) 
							|| (this._Seller.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Seller.Entity = null;
						previousValue.EnterDocs.Remove(this);
					}
					this._Seller.Entity = value;
					if ((value != null))
					{
						value.EnterDocs.Add(this);
						this._SellerID = value.SellerID;
					}
					else
					{
						this._SellerID = default(int);
					}
					this.SendPropertyChanged("Seller");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EnterDetails(EnterDetail entity)
		{
			this.SendPropertyChanging();
			entity.EnterDoc = this;
		}
		
		private void detach_EnterDetails(EnterDetail entity)
		{
			this.SendPropertyChanging();
			entity.EnterDoc = null;
		}
		
		private void attach_SellerAccounts(SellerAccount entity)
		{
			this.SendPropertyChanging();
			entity.EnterDoc = this;
		}
		
		private void detach_SellerAccounts(SellerAccount entity)
		{
			this.SendPropertyChanging();
			entity.EnterDoc = null;
		}
	}
	
	[Table(Name="dbo.Products")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductID;
		
		private string _ProductName;
		
		private int _CategoryID;
		
		private string _Unit;
		
		private System.Nullable<long> _BuyPrice;
		
		private System.Nullable<long> _SellPrice;
		
		private System.Nullable<int> _Mojodi;
		
		private System.Nullable<short> _St_mojodi;
		
		private System.Nullable<bool> _Discountable;
		
		private EntitySet<EnterDetail> _EnterDetails;
		
		private EntitySet<OrderDetail> _OrderDetails;
		
		private EntitySet<Request> _Requests;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnProductNameChanging(string value);
    partial void OnProductNameChanged();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    partial void OnBuyPriceChanging(System.Nullable<long> value);
    partial void OnBuyPriceChanged();
    partial void OnSellPriceChanging(System.Nullable<long> value);
    partial void OnSellPriceChanged();
    partial void OnMojodiChanging(System.Nullable<int> value);
    partial void OnMojodiChanged();
    partial void OnSt_mojodiChanging(System.Nullable<short> value);
    partial void OnSt_mojodiChanged();
    partial void OnDiscountableChanging(System.Nullable<bool> value);
    partial void OnDiscountableChanged();
    #endregion
		
		public Product()
		{
			this._EnterDetails = new EntitySet<EnterDetail>(new Action<EnterDetail>(this.attach_EnterDetails), new Action<EnterDetail>(this.detach_EnterDetails));
			this._OrderDetails = new EntitySet<OrderDetail>(new Action<OrderDetail>(this.attach_OrderDetails), new Action<OrderDetail>(this.detach_OrderDetails));
			this._Requests = new EntitySet<Request>(new Action<Request>(this.attach_Requests), new Action<Request>(this.detach_Requests));
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[Column(Storage="_ProductID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProductName", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this.OnProductNameChanging(value);
					this.SendPropertyChanging();
					this._ProductName = value;
					this.SendPropertyChanged("ProductName");
					this.OnProductNameChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryID", DbType="Int NOT NULL")]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_Unit", DbType="NVarChar(20)")]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[Column(Storage="_BuyPrice", DbType="BigInt")]
		public System.Nullable<long> BuyPrice
		{
			get
			{
				return this._BuyPrice;
			}
			set
			{
				if ((this._BuyPrice != value))
				{
					this.OnBuyPriceChanging(value);
					this.SendPropertyChanging();
					this._BuyPrice = value;
					this.SendPropertyChanged("BuyPrice");
					this.OnBuyPriceChanged();
				}
			}
		}
		
		[Column(Storage="_SellPrice", DbType="BigInt")]
		public System.Nullable<long> SellPrice
		{
			get
			{
				return this._SellPrice;
			}
			set
			{
				if ((this._SellPrice != value))
				{
					this.OnSellPriceChanging(value);
					this.SendPropertyChanging();
					this._SellPrice = value;
					this.SendPropertyChanged("SellPrice");
					this.OnSellPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Mojodi", DbType="Int")]
		public System.Nullable<int> Mojodi
		{
			get
			{
				return this._Mojodi;
			}
			set
			{
				if ((this._Mojodi != value))
				{
					this.OnMojodiChanging(value);
					this.SendPropertyChanging();
					this._Mojodi = value;
					this.SendPropertyChanged("Mojodi");
					this.OnMojodiChanged();
				}
			}
		}
		
		[Column(Storage="_St_mojodi", DbType="SmallInt")]
		public System.Nullable<short> St_mojodi
		{
			get
			{
				return this._St_mojodi;
			}
			set
			{
				if ((this._St_mojodi != value))
				{
					this.OnSt_mojodiChanging(value);
					this.SendPropertyChanging();
					this._St_mojodi = value;
					this.SendPropertyChanged("St_mojodi");
					this.OnSt_mojodiChanged();
				}
			}
		}
		
		[Column(Storage="_Discountable", DbType="Bit")]
		public System.Nullable<bool> Discountable
		{
			get
			{
				return this._Discountable;
			}
			set
			{
				if ((this._Discountable != value))
				{
					this.OnDiscountableChanging(value);
					this.SendPropertyChanging();
					this._Discountable = value;
					this.SendPropertyChanged("Discountable");
					this.OnDiscountableChanged();
				}
			}
		}
		
		[Association(Name="Product_EnterDetail", Storage="_EnterDetails", OtherKey="ProductID")]
		public EntitySet<EnterDetail> EnterDetails
		{
			get
			{
				return this._EnterDetails;
			}
			set
			{
				this._EnterDetails.Assign(value);
			}
		}
		
		[Association(Name="Product_OrderDetail", Storage="_OrderDetails", OtherKey="ProductID")]
		public EntitySet<OrderDetail> OrderDetails
		{
			get
			{
				return this._OrderDetails;
			}
			set
			{
				this._OrderDetails.Assign(value);
			}
		}
		
		[Association(Name="Product_Request", Storage="_Requests", OtherKey="ProductID")]
		public EntitySet<Request> Requests
		{
			get
			{
				return this._Requests;
			}
			set
			{
				this._Requests.Assign(value);
			}
		}
		
		[Association(Name="Category_Product", Storage="_Category", ThisKey="CategoryID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._CategoryID = value.CategoryID;
					}
					else
					{
						this._CategoryID = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EnterDetails(EnterDetail entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_EnterDetails(EnterDetail entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_Requests(Request entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Requests(Request entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[Table(Name="dbo.Orders")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OrderID;
		
		private int _CustomerID;
		
		private string _Date;
		
		private System.Nullable<bool> _Validate;
		
		private EntitySet<OrderDetail> _OrderDetails;
		
		private EntitySet<CustomerAccount> _CustomerAccounts;
		
		private EntitySet<Cheque> _Cheques;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIDChanging(long value);
    partial void OnOrderIDChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnDateChanging(string value);
    partial void OnDateChanged();
    partial void OnValidateChanging(System.Nullable<bool> value);
    partial void OnValidateChanged();
    #endregion
		
		public Order()
		{
			this._OrderDetails = new EntitySet<OrderDetail>(new Action<OrderDetail>(this.attach_OrderDetails), new Action<OrderDetail>(this.detach_OrderDetails));
			this._CustomerAccounts = new EntitySet<CustomerAccount>(new Action<CustomerAccount>(this.attach_CustomerAccounts), new Action<CustomerAccount>(this.detach_CustomerAccounts));
			this._Cheques = new EntitySet<Cheque>(new Action<Cheque>(this.attach_Cheques), new Action<Cheque>(this.detach_Cheques));
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[Column(Storage="_OrderID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerID", DbType="Int NOT NULL")]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_Validate", DbType="Bit")]
		public System.Nullable<bool> Validate
		{
			get
			{
				return this._Validate;
			}
			set
			{
				if ((this._Validate != value))
				{
					this.OnValidateChanging(value);
					this.SendPropertyChanging();
					this._Validate = value;
					this.SendPropertyChanged("Validate");
					this.OnValidateChanged();
				}
			}
		}
		
		[Association(Name="Order_OrderDetail", Storage="_OrderDetails", OtherKey="OrderID")]
		public EntitySet<OrderDetail> OrderDetails
		{
			get
			{
				return this._OrderDetails;
			}
			set
			{
				this._OrderDetails.Assign(value);
			}
		}
		
		[Association(Name="Order_CustomerAccount", Storage="_CustomerAccounts", OtherKey="OrderID")]
		public EntitySet<CustomerAccount> CustomerAccounts
		{
			get
			{
				return this._CustomerAccounts;
			}
			set
			{
				this._CustomerAccounts.Assign(value);
			}
		}
		
		[Association(Name="Order_Cheque", Storage="_Cheques", OtherKey="OrderID")]
		public EntitySet<Cheque> Cheques
		{
			get
			{
				return this._Cheques;
			}
			set
			{
				this._Cheques.Assign(value);
			}
		}
		
		[Association(Name="Customer_Order", Storage="_Customer", ThisKey="CustomerID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._CustomerID = value.CustomerID;
					}
					else
					{
						this._CustomerID = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
		
		private void attach_CustomerAccounts(CustomerAccount entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_CustomerAccounts(CustomerAccount entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
		
		private void attach_Cheques(Cheque entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_Cheques(Cheque entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
	}
	
	[Table(Name="dbo.OrderDetails")]
	public partial class OrderDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OrderID;
		
		private int _ProductID;
		
		private long _SellPrice;
		
		private int _teadad;
		
		private System.Nullable<double> _Discount;
		
		private EntityRef<Order> _Order;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIDChanging(long value);
    partial void OnOrderIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnSellPriceChanging(long value);
    partial void OnSellPriceChanged();
    partial void OnteadadChanging(int value);
    partial void OnteadadChanged();
    partial void OnDiscountChanging(System.Nullable<double> value);
    partial void OnDiscountChanged();
    #endregion
		
		public OrderDetail()
		{
			this._Order = default(EntityRef<Order>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[Column(Storage="_OrderID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProductID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[Column(Storage="_SellPrice", DbType="BigInt NOT NULL")]
		public long SellPrice
		{
			get
			{
				return this._SellPrice;
			}
			set
			{
				if ((this._SellPrice != value))
				{
					this.OnSellPriceChanging(value);
					this.SendPropertyChanging();
					this._SellPrice = value;
					this.SendPropertyChanged("SellPrice");
					this.OnSellPriceChanged();
				}
			}
		}
		
		[Column(Storage="_teadad", DbType="Int NOT NULL")]
		public int teadad
		{
			get
			{
				return this._teadad;
			}
			set
			{
				if ((this._teadad != value))
				{
					this.OnteadadChanging(value);
					this.SendPropertyChanging();
					this._teadad = value;
					this.SendPropertyChanged("teadad");
					this.OnteadadChanged();
				}
			}
		}
		
		[Column(Storage="_Discount", DbType="Float")]
		public System.Nullable<double> Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this.OnDiscountChanging(value);
					this.SendPropertyChanging();
					this._Discount = value;
					this.SendPropertyChanged("Discount");
					this.OnDiscountChanged();
				}
			}
		}
		
		[Association(Name="Order_OrderDetail", Storage="_Order", ThisKey="OrderID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderDetails.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderDetails.Add(this);
						this._OrderID = value.OrderID;
					}
					else
					{
						this._OrderID = default(long);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		[Association(Name="Product_OrderDetail", Storage="_Product", ThisKey="ProductID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.OrderDetails.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.OrderDetails.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.CustomerAccount")]
	public partial class CustomerAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OrderID;
		
		private string _Date;
		
		private long _Debit;
		
		private long _Creditor;
		
		private EntityRef<Order> _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIDChanging(long value);
    partial void OnOrderIDChanged();
    partial void OnDateChanging(string value);
    partial void OnDateChanged();
    partial void OnDebitChanging(long value);
    partial void OnDebitChanged();
    partial void OnCreditorChanging(long value);
    partial void OnCreditorChanged();
    #endregion
		
		public CustomerAccount()
		{
			this._Order = default(EntityRef<Order>);
			OnCreated();
		}
		
		[Column(Storage="_OrderID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="NVarChar(15) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_Debit", DbType="BigInt NOT NULL")]
		public long Debit
		{
			get
			{
				return this._Debit;
			}
			set
			{
				if ((this._Debit != value))
				{
					this.OnDebitChanging(value);
					this.SendPropertyChanging();
					this._Debit = value;
					this.SendPropertyChanged("Debit");
					this.OnDebitChanged();
				}
			}
		}
		
		[Column(Storage="_Creditor", DbType="BigInt NOT NULL")]
		public long Creditor
		{
			get
			{
				return this._Creditor;
			}
			set
			{
				if ((this._Creditor != value))
				{
					this.OnCreditorChanging(value);
					this.SendPropertyChanging();
					this._Creditor = value;
					this.SendPropertyChanged("Creditor");
					this.OnCreditorChanged();
				}
			}
		}
		
		[Association(Name="Order_CustomerAccount", Storage="_Order", ThisKey="OrderID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.CustomerAccounts.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.CustomerAccounts.Add(this);
						this._OrderID = value.OrderID;
					}
					else
					{
						this._OrderID = default(long);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SellerAccount")]
	public partial class SellerAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _EnterID;
		
		private string _Date;
		
		private System.Nullable<long> _Creditor;
		
		private System.Nullable<long> _Debit;
		
		private EntityRef<EnterDoc> _EnterDoc;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEnterIDChanging(long value);
    partial void OnEnterIDChanged();
    partial void OnDateChanging(string value);
    partial void OnDateChanged();
    partial void OnCreditorChanging(System.Nullable<long> value);
    partial void OnCreditorChanged();
    partial void OnDebitChanging(System.Nullable<long> value);
    partial void OnDebitChanged();
    #endregion
		
		public SellerAccount()
		{
			this._EnterDoc = default(EntityRef<EnterDoc>);
			OnCreated();
		}
		
		[Column(Storage="_EnterID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long EnterID
		{
			get
			{
				return this._EnterID;
			}
			set
			{
				if ((this._EnterID != value))
				{
					if (this._EnterDoc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEnterIDChanging(value);
					this.SendPropertyChanging();
					this._EnterID = value;
					this.SendPropertyChanged("EnterID");
					this.OnEnterIDChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="NVarChar(15) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_Creditor", DbType="BigInt")]
		public System.Nullable<long> Creditor
		{
			get
			{
				return this._Creditor;
			}
			set
			{
				if ((this._Creditor != value))
				{
					this.OnCreditorChanging(value);
					this.SendPropertyChanging();
					this._Creditor = value;
					this.SendPropertyChanged("Creditor");
					this.OnCreditorChanged();
				}
			}
		}
		
		[Column(Storage="_Debit", DbType="BigInt")]
		public System.Nullable<long> Debit
		{
			get
			{
				return this._Debit;
			}
			set
			{
				if ((this._Debit != value))
				{
					this.OnDebitChanging(value);
					this.SendPropertyChanging();
					this._Debit = value;
					this.SendPropertyChanged("Debit");
					this.OnDebitChanged();
				}
			}
		}
		
		[Association(Name="EnterDoc_SellerAccount", Storage="_EnterDoc", ThisKey="EnterID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EnterDoc EnterDoc
		{
			get
			{
				return this._EnterDoc.Entity;
			}
			set
			{
				EnterDoc previousValue = this._EnterDoc.Entity;
				if (((previousValue != value) 
							|| (this._EnterDoc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EnterDoc.Entity = null;
						previousValue.SellerAccounts.Remove(this);
					}
					this._EnterDoc.Entity = value;
					if ((value != null))
					{
						value.SellerAccounts.Add(this);
						this._EnterID = value.EnterID;
					}
					else
					{
						this._EnterID = default(long);
					}
					this.SendPropertyChanged("EnterDoc");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Cheque")]
	public partial class Cheque : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OrderID;
		
		private long _ChequeNumber;
		
		private long _ChequeQuantity;
		
		private System.Nullable<long> _AcountNumber;
		
		private string _BankName;
		
		private string _OwnerAcounnt;
		
		private string _DateCheque;
		
		private string _Status;
		
		private EntityRef<Order> _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIDChanging(long value);
    partial void OnOrderIDChanged();
    partial void OnChequeNumberChanging(long value);
    partial void OnChequeNumberChanged();
    partial void OnChequeQuantityChanging(long value);
    partial void OnChequeQuantityChanged();
    partial void OnAcountNumberChanging(System.Nullable<long> value);
    partial void OnAcountNumberChanged();
    partial void OnBankNameChanging(string value);
    partial void OnBankNameChanged();
    partial void OnOwnerAcounntChanging(string value);
    partial void OnOwnerAcounntChanged();
    partial void OnDateChequeChanging(string value);
    partial void OnDateChequeChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public Cheque()
		{
			this._Order = default(EntityRef<Order>);
			OnCreated();
		}
		
		[Column(Storage="_OrderID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[Column(Storage="_ChequeNumber", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ChequeNumber
		{
			get
			{
				return this._ChequeNumber;
			}
			set
			{
				if ((this._ChequeNumber != value))
				{
					this.OnChequeNumberChanging(value);
					this.SendPropertyChanging();
					this._ChequeNumber = value;
					this.SendPropertyChanged("ChequeNumber");
					this.OnChequeNumberChanged();
				}
			}
		}
		
		[Column(Storage="_ChequeQuantity", DbType="BigInt NOT NULL")]
		public long ChequeQuantity
		{
			get
			{
				return this._ChequeQuantity;
			}
			set
			{
				if ((this._ChequeQuantity != value))
				{
					this.OnChequeQuantityChanging(value);
					this.SendPropertyChanging();
					this._ChequeQuantity = value;
					this.SendPropertyChanged("ChequeQuantity");
					this.OnChequeQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_AcountNumber", DbType="BigInt")]
		public System.Nullable<long> AcountNumber
		{
			get
			{
				return this._AcountNumber;
			}
			set
			{
				if ((this._AcountNumber != value))
				{
					this.OnAcountNumberChanging(value);
					this.SendPropertyChanging();
					this._AcountNumber = value;
					this.SendPropertyChanged("AcountNumber");
					this.OnAcountNumberChanged();
				}
			}
		}
		
		[Column(Storage="_BankName", DbType="NVarChar(25)")]
		public string BankName
		{
			get
			{
				return this._BankName;
			}
			set
			{
				if ((this._BankName != value))
				{
					this.OnBankNameChanging(value);
					this.SendPropertyChanging();
					this._BankName = value;
					this.SendPropertyChanged("BankName");
					this.OnBankNameChanged();
				}
			}
		}
		
		[Column(Storage="_OwnerAcounnt", DbType="NVarChar(25)")]
		public string OwnerAcounnt
		{
			get
			{
				return this._OwnerAcounnt;
			}
			set
			{
				if ((this._OwnerAcounnt != value))
				{
					this.OnOwnerAcounntChanging(value);
					this.SendPropertyChanging();
					this._OwnerAcounnt = value;
					this.SendPropertyChanged("OwnerAcounnt");
					this.OnOwnerAcounntChanged();
				}
			}
		}
		
		[Column(Storage="_DateCheque", DbType="NVarChar(15)")]
		public string DateCheque
		{
			get
			{
				return this._DateCheque;
			}
			set
			{
				if ((this._DateCheque != value))
				{
					this.OnDateChequeChanging(value);
					this.SendPropertyChanging();
					this._DateCheque = value;
					this.SendPropertyChanged("DateCheque");
					this.OnDateChequeChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="NVarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Association(Name="Order_Cheque", Storage="_Order", ThisKey="OrderID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.Cheques.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.Cheques.Add(this);
						this._OrderID = value.OrderID;
					}
					else
					{
						this._OrderID = default(long);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private string _UserName;
		
		private string _PassUser;
		
		private System.Nullable<bool> _SaveImport;
		
		private System.Nullable<bool> _SaveExport;
		
		private System.Nullable<bool> _RemoveImort;
		
		private System.Nullable<bool> _RemoveExport;
		
		private System.Nullable<bool> _LockAccountDay;
		
		private System.Nullable<bool> _AccountCustomer;
		
		private System.Nullable<bool> _AccountSeller;
		
		private System.Nullable<bool> _ReachDocument;
		
		private System.Nullable<bool> _AllowReport;
		
		private System.Nullable<bool> _ManageUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPassUserChanging(string value);
    partial void OnPassUserChanged();
    partial void OnSaveImportChanging(System.Nullable<bool> value);
    partial void OnSaveImportChanged();
    partial void OnSaveExportChanging(System.Nullable<bool> value);
    partial void OnSaveExportChanged();
    partial void OnRemoveImortChanging(System.Nullable<bool> value);
    partial void OnRemoveImortChanged();
    partial void OnRemoveExportChanging(System.Nullable<bool> value);
    partial void OnRemoveExportChanged();
    partial void OnLockAccountDayChanging(System.Nullable<bool> value);
    partial void OnLockAccountDayChanged();
    partial void OnAccountCustomerChanging(System.Nullable<bool> value);
    partial void OnAccountCustomerChanged();
    partial void OnAccountSellerChanging(System.Nullable<bool> value);
    partial void OnAccountSellerChanged();
    partial void OnReachDocumentChanging(System.Nullable<bool> value);
    partial void OnReachDocumentChanged();
    partial void OnAllowReportChanging(System.Nullable<bool> value);
    partial void OnAllowReportChanged();
    partial void OnManageUserChanging(System.Nullable<bool> value);
    partial void OnManageUserChanged();
    #endregion
		
		public User()
		{
			OnCreated();
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(25) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_PassUser", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string PassUser
		{
			get
			{
				return this._PassUser;
			}
			set
			{
				if ((this._PassUser != value))
				{
					this.OnPassUserChanging(value);
					this.SendPropertyChanging();
					this._PassUser = value;
					this.SendPropertyChanged("PassUser");
					this.OnPassUserChanged();
				}
			}
		}
		
		[Column(Storage="_SaveImport", DbType="Bit")]
		public System.Nullable<bool> SaveImport
		{
			get
			{
				return this._SaveImport;
			}
			set
			{
				if ((this._SaveImport != value))
				{
					this.OnSaveImportChanging(value);
					this.SendPropertyChanging();
					this._SaveImport = value;
					this.SendPropertyChanged("SaveImport");
					this.OnSaveImportChanged();
				}
			}
		}
		
		[Column(Storage="_SaveExport", DbType="Bit")]
		public System.Nullable<bool> SaveExport
		{
			get
			{
				return this._SaveExport;
			}
			set
			{
				if ((this._SaveExport != value))
				{
					this.OnSaveExportChanging(value);
					this.SendPropertyChanging();
					this._SaveExport = value;
					this.SendPropertyChanged("SaveExport");
					this.OnSaveExportChanged();
				}
			}
		}
		
		[Column(Storage="_RemoveImort", DbType="Bit")]
		public System.Nullable<bool> RemoveImort
		{
			get
			{
				return this._RemoveImort;
			}
			set
			{
				if ((this._RemoveImort != value))
				{
					this.OnRemoveImortChanging(value);
					this.SendPropertyChanging();
					this._RemoveImort = value;
					this.SendPropertyChanged("RemoveImort");
					this.OnRemoveImortChanged();
				}
			}
		}
		
		[Column(Storage="_RemoveExport", DbType="Bit")]
		public System.Nullable<bool> RemoveExport
		{
			get
			{
				return this._RemoveExport;
			}
			set
			{
				if ((this._RemoveExport != value))
				{
					this.OnRemoveExportChanging(value);
					this.SendPropertyChanging();
					this._RemoveExport = value;
					this.SendPropertyChanged("RemoveExport");
					this.OnRemoveExportChanged();
				}
			}
		}
		
		[Column(Storage="_LockAccountDay", DbType="Bit")]
		public System.Nullable<bool> LockAccountDay
		{
			get
			{
				return this._LockAccountDay;
			}
			set
			{
				if ((this._LockAccountDay != value))
				{
					this.OnLockAccountDayChanging(value);
					this.SendPropertyChanging();
					this._LockAccountDay = value;
					this.SendPropertyChanged("LockAccountDay");
					this.OnLockAccountDayChanged();
				}
			}
		}
		
		[Column(Storage="_AccountCustomer", DbType="Bit")]
		public System.Nullable<bool> AccountCustomer
		{
			get
			{
				return this._AccountCustomer;
			}
			set
			{
				if ((this._AccountCustomer != value))
				{
					this.OnAccountCustomerChanging(value);
					this.SendPropertyChanging();
					this._AccountCustomer = value;
					this.SendPropertyChanged("AccountCustomer");
					this.OnAccountCustomerChanged();
				}
			}
		}
		
		[Column(Storage="_AccountSeller", DbType="Bit")]
		public System.Nullable<bool> AccountSeller
		{
			get
			{
				return this._AccountSeller;
			}
			set
			{
				if ((this._AccountSeller != value))
				{
					this.OnAccountSellerChanging(value);
					this.SendPropertyChanging();
					this._AccountSeller = value;
					this.SendPropertyChanged("AccountSeller");
					this.OnAccountSellerChanged();
				}
			}
		}
		
		[Column(Storage="_ReachDocument", DbType="Bit")]
		public System.Nullable<bool> ReachDocument
		{
			get
			{
				return this._ReachDocument;
			}
			set
			{
				if ((this._ReachDocument != value))
				{
					this.OnReachDocumentChanging(value);
					this.SendPropertyChanging();
					this._ReachDocument = value;
					this.SendPropertyChanged("ReachDocument");
					this.OnReachDocumentChanged();
				}
			}
		}
		
		[Column(Storage="_AllowReport", DbType="Bit")]
		public System.Nullable<bool> AllowReport
		{
			get
			{
				return this._AllowReport;
			}
			set
			{
				if ((this._AllowReport != value))
				{
					this.OnAllowReportChanging(value);
					this.SendPropertyChanging();
					this._AllowReport = value;
					this.SendPropertyChanged("AllowReport");
					this.OnAllowReportChanged();
				}
			}
		}
		
		[Column(Storage="_ManageUser", DbType="Bit")]
		public System.Nullable<bool> ManageUser
		{
			get
			{
				return this._ManageUser;
			}
			set
			{
				if ((this._ManageUser != value))
				{
					this.OnManageUserChanging(value);
					this.SendPropertyChanging();
					this._ManageUser = value;
					this.SendPropertyChanged("ManageUser");
					this.OnManageUserChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Requests")]
	public partial class Request : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductID;
		
		private string _RequestDate;
		
		private string _NeedDate;
		
		private System.Nullable<int> _teadad;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnRequestDateChanging(string value);
    partial void OnRequestDateChanged();
    partial void OnNeedDateChanging(string value);
    partial void OnNeedDateChanged();
    partial void OnteadadChanging(System.Nullable<int> value);
    partial void OnteadadChanged();
    #endregion
		
		public Request()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[Column(Storage="_ProductID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[Column(Storage="_RequestDate", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RequestDate
		{
			get
			{
				return this._RequestDate;
			}
			set
			{
				if ((this._RequestDate != value))
				{
					this.OnRequestDateChanging(value);
					this.SendPropertyChanging();
					this._RequestDate = value;
					this.SendPropertyChanged("RequestDate");
					this.OnRequestDateChanged();
				}
			}
		}
		
		[Column(Storage="_NeedDate", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string NeedDate
		{
			get
			{
				return this._NeedDate;
			}
			set
			{
				if ((this._NeedDate != value))
				{
					this.OnNeedDateChanging(value);
					this.SendPropertyChanging();
					this._NeedDate = value;
					this.SendPropertyChanged("NeedDate");
					this.OnNeedDateChanged();
				}
			}
		}
		
		[Column(Storage="_teadad", DbType="Int")]
		public System.Nullable<int> teadad
		{
			get
			{
				return this._teadad;
			}
			set
			{
				if ((this._teadad != value))
				{
					this.OnteadadChanging(value);
					this.SendPropertyChanging();
					this._teadad = value;
					this.SendPropertyChanged("teadad");
					this.OnteadadChanged();
				}
			}
		}
		
		[Association(Name="Product_Request", Storage="_Product", ThisKey="ProductID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Requests.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Requests.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
